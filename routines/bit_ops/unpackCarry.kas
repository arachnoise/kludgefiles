;unpackCarry.kas
;carries bits from one array to the other

callUnpack1:
	load	[myArray]
	sto		[UPpackedVal]
	load	myBuf1
	sto		[UPptrUnpacked]
	load	callUnpack2
	add		[jumpBase]
	sto		[UPreturn]
	jmp		Unpack
	
callUnpack2:
	load	[myArray+1]
	sto		[UPpackedVal]
	load	myBuf2
	sto		[UPptrUnpacked]
	load	callUPCarry
	add		[jumpBase]
	sto		[UPreturn]
	jmp		Unpack

callUPCarry:
	load	[toShift]
	sto		[UPCtoShift]
	load	myBuf2
	sto		[UPCsrcPtr]
	load	myBuf1
	sto		[UPCdestPtr]
	load	callPack1
	add		[jumpBase]
	sto		[UPCreturn]
	jmp		unpackCarry
	
callPack1:
	load	myBuf1
	sto		[PKptrUnpacked]
	load	callPack2
	add		[jumpBase]
	sto		[PKreturn]
	jmp		Pack
	
callPack2:
	load	[PKpackedVal]
	sto		[myArray]
	
	load	myBuf2
	sto		[PKptrUnpacked]
	load	EndHere
	add		[jumpBase]
	sto		[PKreturn]
	jmp		Pack

EndHere:
	load	[PKpackedVal]
	sto		[myArray+1]
	halt

jumpBase:	dword	0x04200000
toShift:	dword	0		;toShift
myArray:	dword	0		;myArray
			dword	0
			
myBuf1:		dword	0		;myBuf1
			dword	0, 0, 0, 0, 0, 0, 0
			dword	0, 0, 0, 0, 0, 0, 0, 0
			dword	0, 0, 0, 0, 0, 0, 0, 0
			dword	0, 0, 0, 0, 0, 0, 0, 0
myBuf2:		dword	0		;myBuf2
			dword	0, 0, 0, 0, 0, 0, 0
			dword	0, 0, 0, 0, 0, 0, 0, 0
			dword	0, 0, 0, 0, 0, 0, 0, 0
			dword	0, 0, 0, 0, 0, 0, 0, 0

;unpackCarry assumptions:
;only shifts to the left
;toShift is a positive number
;toShift is less than 32
			
unpackCarry:
	load	[UPCtoShift]
	jnz		UPCNormalCase
	
	jmp		UPCreturn
	
UPCNormalCase:	
	sto		[Nvalue]
	load	[jumpBase]
	add		UPCPrep
	sto		[Nreturn]
	jmp		Negate
	
UPCPrep:
	add		UPCsize
	sto		[UPCindex]
	
	load	[UPCsrcPtr]				;carry bits are in index offset: size - toShift
	add		[UPCindex]				;update pointer accordingly
	sto		[UPCsrcPtr]
	
UPCLoop:
	load	[[UPCsrcPtr]]
	sto		[[UPCdestPtr]]
	
	load	[UPCsrcPtr]
	add		1
	sto		[UPCsrcPtr]
	
	load	[UPCdestPtr]
	add		1
	sto		[UPCdestPtr]
	
	load	[UPCindex]
	add		1
	sto		[UPCindex]
	add		UPClimit
	jnz		UPCLoop
	
UPCreturn:	dword	0

UPCsrcPtr:	dword	0
UPCdestPtr:	dword	0
UPCtoShift:	dword	0

UPCindex:	dword	0
UPCsize:	equ		32
UPClimit:	equ		-32

Negate:
	load	[Nvalue]
	sto		[Nmult]
	load	32
	
NLoop:
	add		-1
	sto		[Ncounter]
	load	[Nvalue]
	shl		1
	add		[Nmult]
	sto		[Nvalue]
	load	[Ncounter]
	jnz		NLoop

	load	[Nvalue]

Nreturn:	dword	0
	
Nvalue:		dword	0			;Nvalue
Nmult:		dword	0			;N old value
Ncounter:	dword	0			;N counter

Pack:
	load	0
	sto		[PKcurrPos]
	sto		[PKpackedVal]
	
PKLoop:
	load	[[PKptrUnpacked]]	;retrieve bit at indexed location
	shl		[PKcurrPos]			;shift to its proper position
	add		[PKpackedVal]		;pack into the result
	sto		[PKpackedVal]		;and save it
	
	load	[PKptrUnpacked]
	add		1
	sto		[PKptrUnpacked]
	
	load	[PKcurrPos]
	add		1
	sto		[PKcurrPos]			;update position
	
	add		[PKlimit]				;is PKcurrPos less than 32 (PKlimit)?
	jnz		PKLoop

	;return address
PKreturn:		dword	0

	;parameters
PKpackedVal:	dword	0
PKptrUnpacked:	dword 0

PKcurrPos:		dword	0
PKlimit:		dword	-32		;PKlimit

Unpack:
	load	[UPpackedVal]
	sto		[UPworkingVal]
	
	load	0
	sto		[UPcurrPos]
	
	load	32					;number of bits in an addressed value
	
UPLoop:
	add		-1
	sto		[UPfromLeft]		;update distance from big (left) end of value

	load	[UPworkingVal]		;get bit
	shl		[UPfromLeft]

	jnz		UPUPBitIsSet

UPBitIsUnset:
	load	0					;store bit in accumulator
	jmp		UPEnd
	
UPUPBitIsSet:
	load	-1
	shl		[UPcurrPos]			;if set - clear this bit
	add		[UPworkingVal]
	sto		[UPworkingVal]
	
	load	1					;store bit in accumulator

UPEnd:
	sto		[[UPptrUnpacked]]
	
	load	[UPptrUnpacked]
	add		1
	sto		[UPptrUnpacked]
	
	load	[UPcurrPos]			;update UPcurrPos
	add		1
	sto		[UPcurrPos]			
	
	load	[UPfromLeft]		;if more bits to shift
	jnz		UPLoop				;start over
	
UPreturn:		dword 0

	;parameters (public)
UPpackedVal:	dword 0			;packed Value
UPptrUnpacked:	dword 0

UPcurrPos:		dword 0	
UPfromLeft:		dword 0
UPworkingVal:	dword 0			;working value